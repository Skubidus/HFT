@page "/ModifyExpense/{Id:int}"
@rendermode InteractiveServer

@using System.Diagnostics
@using BlazorUI.ViewModels
@using HFTLibrary.Data
@using SessionData

@inject IEFCoreData _db;
@inject NavigationManager _nav;
@inject SessionData _session;
@inject IConfiguration _config;

<PageTitle>@_config["AppShortName"] - Ausgabe bearbeiten</PageTitle>

<div class="container-fluid border-bottom border-1 mb-3 px-0">
    <div class="row mx-0 mb-3">
        <div class="col p-0">
            <h3 class="mb-1 mt-1">Ausgabe bearbeiten</h3>
        </div>
    </div>
</div>

<div class="container-fluid mb-4 px-0">
    @if (_financialPlan is null)
    {
        <div class="row">
            <p class="fs-4 text-danger">Kein Finanzplan ausgewählt!</p>
        </div>
    }
    else if (_expense is null)
    {
        <div class="row">
            <p class="fs-4 text-danger">Ausgabe nicht ausgewählt oder ID nicht gefunden!</p>
        </div>
    }
    else if (_showDeleteConfirmDialog)
    {
        <div class="row">
            <p class="fs-4 text-danger">TODO: Lösch-Dialog für Ausgaben!</p>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col">

                <EditForm Model="@_expense" OnSubmit="HandleValidSubmitAsync" FormName="ExpenseForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="card">

                        <div class="card-body py-0">

                            <div class="row justify-content-end mt-2 pe-1">
                                <div class="col-auto bi bi-trash btn btn-outline-danger py-2 mt-1 me-2" title="Ausgabe löschen" @onclick="OnDeleteButtonClick" />
                            </div>

                            <div class="row">
                                <div class="container">

                                    <div class="row my-2">
                                        <div class="col-4">
                                            <label>ID:</label>
                                        </div>
                                        <div class="col">
                                            <span>@_expense?.Id</span>
                                        </div>
                                    </div>

                                    <div class="row my-2">
                                        <div class="col-4">
                                            <label>Name:</label>
                                        </div>
                                        <div class="col">
                                            <InputText @bind-Value="@_expense!.Name" class="w-100" />
                                        </div>
                                    </div>

                                    <div class="row my-2">
                                        <div class="col-4">
                                            <label>Beschreibung:</label>
                                        </div>
                                        <div class="col">
                                            <InputText @bind-Value="@_expense.Description" class="w-100" />
                                        </div>
                                    </div>

                                    <div class="row my-2">
                                        <div class="col-4">
                                            <label>Betrag:</label>
                                        </div>
                                        <div class="col">
                                            <InputText @bind-Value="@_expense.PriceString" class="w-100" />
                                        </div>
                                    </div>

                                    <div class="row my-2">
                                        <div class="col-4">
                                            <label>Erstellt am:</label>
                                        </div>
                                        <div class="col">
                                            <span>@_expense.DateCreated.ToShortDateString() - @_expense.DateCreated.ToLongTimeString() Uhr</span>
                                        </div>
                                    </div>

                                    <div class="row my-2">
                                        <div class="col-4">
                                            <label>Zuletzt bearbeitet am:</label>
                                        </div>
                                        <div class="col">
                                            <span>@_expense.DateModified.ToShortDateString() - @_expense.DateModified.ToLongTimeString() Uhr</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>

                    <div class="container my-2 mt-3 border-top border-1 px-0">
                        <div class="row mt-3 justify-content-end">
                            <div class="col-auto">
                                <a href="/Expenses" class="btn btn-outline-secondary px-4">Abbrechen</a>
                            </div>

                            <div class="col-auto">
                                <button type="submit" class="btn btn-outline-primary px-4">Speichern</button>
                            </div>
                        </div>
                    </div>

                </EditForm>
            </div>
        </div>
    }

</div>

@code {
    private FinancialPlanViewModel? _financialPlan = null;
    private ExpenseEntryViewModel? _expense = null;
    private bool _showDeleteConfirmDialog = false;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _financialPlan = (await _db.GetFinancialPlanAsync(_session.SelectedFinancialPlanId))?.ToFinancialPlanViewModel();

        if (_financialPlan is null)
        {
            throw new InvalidOperationException("Financial plan not found.");
        }

        _expense = _financialPlan.Expenses.SingleOrDefault(x => x.Id == Id);
        if (_expense is null)
        {
            throw new InvalidOperationException($"Expense with ID {Id} not found.");
        }
    }

    private async Task HandleValidSubmitAsync()
    {
        if (_financialPlan is null
        || _expense is null)
        {
            return;
        }

        _expense.DateModified = DateTime.Now;
        await _db.CreateOrUpdateExpenseEntryAsync(_expense.ToExpenseEntryDTO());
    }

    private void OnDeleteButtonClick()
    {
        _showDeleteConfirmDialog = true;
    }

    private void HandleDialogClosed()
    {
        _showDeleteConfirmDialog = false;
        StateHasChanged();
    }
}